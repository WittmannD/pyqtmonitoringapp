{"version":3,"sources":["App.js","index.js"],"names":["useStyles","makeStyles","theme","root","height","alignContent","titlesContainer","overflow","maxHeight","monitorsContainer","monitorCard","padding","spacing","marginBottom","backgroundColor","backgroundImage","cursor","card","display","monitorCardSelected","tabCount","marginRight","flexExpand","flexGrow","delete","color","palette","error","light","add","text","secondary","success","dark","back","openInExplorer","cardCover","flexBasis","flexShrink","position","cardContent","bullet","margin","transform","elide","whiteSpace","textOverflow","altTitles","boxOrient","lineClamp","fixed","formDetail","fontSize","textTransform","MonitorCard","props","classes","useState","data","get","selected","setSelected","useEffect","defaultMonitor","Paper","elevation","className","onClick","Typography","variant","component","clsx","getIn","Box","sx","width","mt","LinearProgress","TitleCard","getDatetimeString","unixTimestamp","inMs","milliseconds","Math","ceil","dateObject","Date","toLocaleString","titleLink","coverPath","path","decodeURI","URL","href","Card","CardMedia","image","title","top","left","p","IconButton","size","e","right","popupId","popupState","bindToggle","Popper","bindPopper","ClickAwayListener","onClickAway","close","gutterBottom","flexDirection","CardContent","justifyContent","style","align","Link","openInBrowser","preventDefault","CardActions","Button","send","remove","startIcon","App","useRef","Map","setTabsCount","monitors","setMonitors","defaultMonitors","setDefaultMonitors","titles","setTitles","tabsCountValue","autoMode","state","setState","addMonitorTab","setAddMonitorTab","window","Controller","openCoverInExplorerEmit","link","openLinkInBrowserEmit","changeAutoModeEmit","getInitialData","JSON","parse","fromJS","storedTitles","localStorage","getItem","commitTab","connect","v","tabsCount","commitTitle","set","uid","info","status","message","timestamp","setTitleStatus","updateIn","dict","commitMonitor","monitor","options","storedState","setItem","stringify","toJS","Container","maxWidth","Grid","container","item","xs","sm","suppressScrollX","map","addMonitorEmit","name","keyword","description","timeout","check_every","method","url","payload","addMonitor","unselectedMonitors","forEach","value","key","removeMonitorEmit","entrySeq","i","update","alignItems","TextField","label","type","onChange","target","InputLabelProps","InputProps","inputProps","max","min","fullWidth","createTabsEmit","FormControlLabel","control","Switch","checked","labelPlacement","sortBy","o","addTitleForSendEmit","QWebChannel","qt","webChannelTransport","channel","Browser","objects","backend","controller","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ca5b6c9c.chunk.js","sourcesContent":["import {\n    Box,\n    Button, Card,\n    CardActions, CardContent, CardMedia, ClickAwayListener,\n    Container, createMuiTheme, Fade, FormControlLabel,\n    Grid,\n    IconButton, LinearProgress, Link,\n    makeStyles,\n    Paper, Popper, Switch,\n    TextField, Typography\n} from \"@material-ui/core\"\nimport {Map, fromJS} from 'immutable'\nimport DeleteIcon from '@material-ui/icons/Delete'\nimport AddIcon from '@material-ui/icons/Add'\nimport FolderOpenIcon from '@material-ui/icons/FolderOpen'\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack'\nimport DoneIcon from '@material-ui/icons/Done'\nimport ErrorOutlineIcon from '@material-ui/icons/ErrorOutline'\nimport {Component, useEffect, useRef, useState} from 'react'\nimport clsx from 'clsx'\nimport {QWebChannel} from 'qwebchannel'\nimport {uid} from \"uid\";\nimport 'react-perfect-scrollbar/dist/css/styles.css';\nimport PerfectScrollbar from 'react-perfect-scrollbar';\nimport PopupState, {bindPopper, bindToggle} from \"material-ui-popup-state\";\n\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        height: 'calc(100vh - 10px)',\n        '& > div': {\n            alignContent: 'flex-start'\n        },\n        '& > div > div:nth-child(1)': {\n            height: '60px'\n        }\n    },\n    titlesContainer: {\n        overflow: 'hidden',\n        maxHeight: 'calc(100vh - 60px - 10px)'\n    },\n    monitorsContainer : {\n        overflow: 'hidden',\n        maxHeight: 'calc(100vh - 60px - 10px)'\n    },\n    monitorCard: {\n        padding: theme.spacing(2),\n        marginBottom: theme.spacing(2),\n        backgroundColor: 'rgba(250, 250, 250, 1)',\n        backgroundImage: 'linear-gradient(0deg, rgba(247,247,247,1) 0%, rgba(231,231,231,1) 100%)',\n        cursor: 'pointer'\n    },\n    card: {\n        display: 'flex',\n        marginBottom: theme.spacing(2),\n        backgroundColor: 'rgba(250, 250, 250, 1)',\n        backgroundImage: 'linear-gradient(0deg, rgba(247,247,247,1) 0%, rgba(231,231,231,1) 100%)',\n        height: '200px'\n    },\n    monitorCardSelected: {\n        backgroundImage: 'linear-gradient(0deg, rgba(228,243,255,1) 0%, rgba(211,227,253,1) 100%)'\n    },\n    tabCount: {\n        marginBottom: '10px',\n        marginRight: '10px'\n    },\n    flexExpand: {\n        flexGrow: 1\n    },\n    delete: {\n        color: theme.palette.error.light\n    },\n    add: {\n        color: theme.palette.text.secondary\n    },\n    success: {\n        color: theme.palette.success.dark\n    },\n    error: {\n        color: theme.palette.error.dark\n    },\n    back: {\n        color: theme.palette.text.secondary\n    },\n    openInExplorer: {\n        color: 'rgba(255, 255, 255, 0.75)'\n    },\n    cardCover: {\n        flexBasis: '30%',\n        flexShrink: 0,\n        flexGrow: 0,\n        position: \"relative\"\n    },\n    cardContent: {\n        flexGrow: 1\n    },\n    bullet: {\n        display: 'inline-block',\n        margin: '0 4px',\n        transform: 'scale(0.8)',\n    },\n    elide: {\n        overflow: 'hidden',\n        whiteSpace: 'nowrap',\n        textOverflow: 'ellipsis'\n    },\n    altTitles: {\n        overflow: 'hidden',\n        display: '-webkit-box',\n        boxOrient: 'vertical',\n        lineClamp: 2\n    },\n    fixed: {\n        position: 'fixed'\n    },\n    formDetail: {\n        color: 'rgba(0, 0, 0, 0.26)',\n        fontSize: '0.6em',\n        textTransform: 'uppercase'\n    }\n}))\n\n\nfunction MonitorCard(props) {\n\n    const classes = useStyles()\n\n    const [selected, setSelected] = useState(props.data.get('selected'))\n\n    useEffect(() => {\n        setSelected(props.data.get('selected'))\n    }, [props.data])\n\n\n    return (\n        props.defaultMonitor ?\n            <Paper elevation={0} className={classes.monitorCard} onClick={props.onClick}>\n                <Typography variant=\"body1\" component=\"h3\">\n                    { props.data.get('name') }\n                </Typography>\n                <Typography variant=\"caption\" component=\"p\">\n                    { props.data.get('description') }\n                </Typography>\n            </Paper>\n        :\n            <Paper\n                className={clsx(classes.monitorCard, {\n                    [classes.monitorCardSelected]: selected\n                })}\n                onClick={props.onClick}\n                elevation={0}\n            >\n                <Typography variant=\"body1\" component=\"h3\">\n                    { props.data.getIn(['options', 'name']) }\n                </Typography>\n                <Typography variant=\"caption\" component=\"p\">\n                    { props.data.getIn(['options', 'description']) }\n                </Typography>\n                <Box sx={{ width: '100%' }} mt={2} >\n                  <LinearProgress color=\"secondary\" />\n                </Box>\n            </Paper>\n    )\n}\n\n\nfunction TitleCard(props) {\n\n    const classes = useStyles()\n\n\n    function getDatetimeString(unixTimestamp, inMs=false) {\n        let milliseconds = unixTimestamp\n        if (!inMs)\n            milliseconds = Math.ceil(unixTimestamp * 1000)\n        const dateObject = new Date(milliseconds)\n        return dateObject.toLocaleString()\n    }\n\n    const titleLink = \"http://seoji.nl.go.kr/landingPage?isbn=\" + props.data.getIn(['title', 'isbn'])\n    const coverPath = () => {\n        let path = decodeURI(props.data.getIn(['title', 'cover']))\n        return new URL(`file:///${path}`).href\n    }\n\n    return (\n        <Card className={classes.card} elevation={0} >\n            <CardMedia\n                className={classes.cardCover}\n                image={coverPath()}\n                title=\"cover\"\n            >\n                <Box position=\"absolute\" top={0} left={0} p={1}>\n                    <IconButton\n                        size=\"small\"\n                        className={classes.openInExplorer}\n                        onClick={(e) => {\n                            props.openInExplorer(coverPath())\n                        }}\n                    >\n                        <FolderOpenIcon fontSize=\"small\"/>\n                    </IconButton>\n                </Box>\n                {props.data.getIn(['info', 'status']) &&\n                    <Box position=\"absolute\" top={0} right={0} p={1}>\n                        <PopupState variant=\"popper\" popupId=\"demo-popup-popper\">\n                            {(popupState) => (\n                                <div>\n                                    {\n                                        props.data.getIn(['info', 'status']) === 'success' &&\n                                        <IconButton\n                                            size=\"small\"\n                                            className={classes.success}\n                                            {...bindToggle(popupState)}\n                                        >\n                                            <DoneIcon fontSize=\"small\"/>\n                                        </IconButton>\n                                    }\n                                    {\n                                        props.data.getIn(['info', 'status']) === 'error' &&\n                                        <IconButton\n                                            size=\"small\"\n                                            className={classes.error}\n                                            {...bindToggle(popupState)}\n                                        >\n                                            <ErrorOutlineIcon fontSize=\"small\"/>\n                                        </IconButton>\n                                    }\n\n                                    <Popper {...bindPopper(popupState)}  >\n                                        <ClickAwayListener onClickAway={popupState.close}>\n                                            <Paper>\n                                                <Box sx={{p: 2}}>\n                                                    <Typography variant=\"body2\" gutterBottom>\n                                                        <i>\n                                                            {\n                                                                getDatetimeString(\n                                                                    props.data.getIn(['info', 'timestamp']),\n                                                                    true\n                                                                )\n                                                            }\n                                                        </i>\n                                                        : {props.data.getIn(['info', 'status'])}\n                                                    </Typography>\n                                                    <Typography variant=\"body2\">\n                                                        {props.data.getIn(['info', 'message'])}\n                                                    </Typography>\n\n                                                </Box>\n                                            </Paper>\n\n                                        </ClickAwayListener>\n\n                                    </Popper>\n                                </div>\n                            )}\n                        </PopupState>\n\n                    </Box>\n                }\n            </CardMedia>\n            <Box display=\"flex\" width=\"70%\" flexDirection=\"column\">\n                <CardContent className={classes.cardContent}>\n                    <Box display=\"flex\" justifyContent=\"space-between\">\n                        <Typography variant=\"caption\" className={clsx(classes.formDetail, classes.elide)} title=\"form detail\">\n                            <span style={{'display': 'inline-block', 'width': '110px'}}>\n                                form: <b>{props.data.getIn(['title', 'description', 3])}</b>\n                            </span>\n                            <span>publisher: <b>{props.data.getIn(['title', 'description', 2])}</b></span>\n                        </Typography>\n                        <Typography variant=\"caption\" component=\"div\" align=\"right\" style={{\"flex\": \"1 0 150px\"}}>\n                            <span>{getDatetimeString(props.data.getIn(['title', 'timestamp']))}</span>\n                        </Typography>\n                    </Box>\n                    <Typography variant=\"body1\" component=\"h3\" className={classes.elide}>\n                        {props.data.getIn(['title', 'rus_title'])}\n                    </Typography>\n                    <Typography variant=\"caption\" component=\"h4\" gutterBottom className={classes.altTitles}>\n                        <span>\n                            {props.data.getIn(['title', 'eng_title'])}\n                        </span>\n                        <span className={classes.bullet}>•</span>\n                        <span>\n                            {props.data.getIn(['title', 'kor_title'])}\n                        </span>\n                    </Typography>\n                    <Typography>\n                        <Link\n                            href={titleLink}\n                            onClick={(e) => {\n                                props.openInBrowser(titleLink)\n                                e.preventDefault();\n                            }}\n                            variant=\"caption\"\n                        >\n                            ISBN {props.data.getIn(['title', 'isbn'])}\n                        </Link>\n                    </Typography>\n                </CardContent>\n                <CardActions>\n                    <Button\n                        onClick={props.send}\n                        className={clsx(classes.flexExpand)}\n                    >\n                        Fill Form\n                    </Button>\n                    <Button\n                        onClick={props.remove}\n                        startIcon={\n                            <DeleteIcon className={classes.delete}/>\n                        }\n                    >\n                        Delete\n                    </Button>\n                </CardActions>\n            </Box>\n        </Card>\n    )\n}\n\nfunction App() {\n    const classes = useStyles()\n\n    const titlesRef = useRef(Map())\n    const [tabsCount, setTabsCount] = useState(0)\n    const [monitors, setMonitors] = useState(Map())\n    const [defaultMonitors, setDefaultMonitors] = useState(Map())\n    const [titles, setTitles] = useState(Map())\n\n    const [state, setState] = useState({\n        tabsCountValue: 1,\n        autoMode: true\n    })\n\n    const [addMonitorTab, setAddMonitorTab] = useState(false)\n\n    const createTabs = (e) => {\n        window.Controller.createTabsEmit(state.tabsCountValue)\n    }\n\n    const addMonitor = (monitor) => {\n        window.Controller.addMonitorEmit(JSON.stringify({\n            uid: uid(16),\n            name: monitor.get('name'),\n            keyword: monitor.getIn(['payload', 'q']),\n            description: monitor.get('description'),\n            timeout: monitor.get('timeout'),\n            check_every: monitor.get('check_every'),\n            method: monitor.get('method'),\n            url: monitor.get('url'),\n            payload: monitor.get('payload').toJS()\n        }))\n    }\n\n    const removeMonitors = (e) => {\n        let unselectedMonitors = Map()\n        monitors.forEach((value, key, map) => {\n            if (value.get('selected')) {\n                window.Controller.removeMonitorEmit(key)\n            } else {\n                unselectedMonitors = unselectedMonitors.set(key, value)\n            }\n        })\n\n        setMonitors(unselectedMonitors)\n    }\n    const openInExplorer = (path) => window.Controller.openCoverInExplorerEmit(path)\n    const openInBrowser = (link) => window.Controller.openLinkInBrowserEmit(link)\n\n    const addTitleForSend = (title) =>\n        window.Controller.addTitleForSendEmit(\n            JSON.stringify(['client', title.get('title').toJS()])\n        )\n\n    const removeTitle = (uid) => setTitles(titles => titles.delete(uid))\n\n    const tabsCountChange = (e) => setState(state => ({tabsCountValue: e.target.value, autoMode: state.autoMode}))\n    const autoModeChange = (e) => setState(state => ({tabsCountValue: state.tabsCountValue, autoMode: e.target.checked}))\n\n    useEffect(() => {\n        window.Controller.changeAutoModeEmit(state.autoMode)\n    }, [state.autoMode])\n\n    useEffect(() => {\n        window.Controller.getInitialData((data) => {\n            data = JSON.parse(data)\n            setDefaultMonitors(defaultMonitors => fromJS(data.monitors))\n        })\n\n        const storedTitles = JSON.parse(window.localStorage.getItem('titles'))\n\n        if (storedTitles)\n            setTitles(fromJS(storedTitles))\n\n        window.Controller.commitTab.connect((v) => {\n            setTabsCount(tabsCount => tabsCount + (-1) ** (!v))\n        })\n\n        window.Controller.commitTitle.connect((data) => {\n            let title = JSON.parse(data)\n            setTitles(titles => titles.set(\n                title.uid,\n                fromJS({info: {status: null, message: null, timestamp: null}, title})\n            ))\n        })\n\n        window.Controller.setTitleStatus.connect((data) => {\n            let info = fromJS(JSON.parse(data))\n            setTitles(titles => titles.updateIn(\n                [info.get(0), 'info'],\n                dict => info.get(1)\n            ))\n        })\n\n        window.Controller.commitMonitor.connect((data) => {\n            let monitor = JSON.parse(data)\n            setMonitors(monitors => monitors.set(monitor.uid, fromJS({selected: false, options: monitor})))\n        })\n\n        const storedState = JSON.parse(window.localStorage.getItem('state'))\n\n        if (storedState)\n            setState(storedState)\n\n    }, [])\n\n    useEffect(() => {\n        window.localStorage.setItem('titles', JSON.stringify(titles.toJS()))\n    }, [titles])\n\n    useEffect(() => {\n        window.localStorage.setItem('state', JSON.stringify(state))\n    }, [state])\n\n\n\n    return (\n        <Container maxWidth=\"lg\">\n            <Grid container spacing={2} className={classes.root}>\n                <Grid item container xs={12} sm={4} spacing={2} style={{'height': '100%'}}>\n                    {\n                        addMonitorTab ?\n                            <>\n                                <Grid item xs={12}>\n                                    <IconButton\n                                        aria-label=\"back\"\n                                        size=\"medium\"\n                                        className={classes.back}\n                                        onClick={() => { setAddMonitorTab(false) }}>\n                                        <ArrowBackIcon fontSize=\"small\"/>\n                                    </IconButton>\n                                </Grid>\n                                <Grid item xs={12} spacing={0} style={{'height': 'calc(100% - 60px)'}}>\n                                    <PerfectScrollbar options={{suppressScrollX: false}} style={{width: '100%'}}>\n                                        {\n                                            defaultMonitors.map(monitor =>\n                                                <MonitorCard\n                                                    data={monitor}\n                                                    key={monitor.get('uid')}\n                                                    defaultMonitor={true}\n                                                    onClick={(e) => {\n                                                        addMonitor(monitor)\n                                                        setAddMonitorTab(false)\n                                                    }}\n                                                />\n                                            )\n                                        }\n                                    </PerfectScrollbar>\n                                </Grid>\n                            </>\n                        :\n                            <>\n                                <Grid item xs={12}>\n                                    <IconButton\n                                        aria-label=\"add\"\n                                        size=\"medium\"\n                                        className={classes.add}\n                                        onClick={() => {setAddMonitorTab(true)}}>\n                                        <AddIcon fontSize=\"small\"/>\n                                    </IconButton>\n                                    <IconButton\n                                        aria-label=\"delete\"\n                                        size=\"medium\"\n                                        className={classes.delete}\n                                        onClick={removeMonitors}>\n                                        <DeleteIcon fontSize=\"small\"/>\n                                    </IconButton>\n                                </Grid>\n                                <Grid item xs={12} spacing={0} style={{'height': 'calc(100% - 60px)'}}>\n                                    <PerfectScrollbar options={{suppressScrollX: false}} style={{width: '100%'}}>\n                                        {\n                                            monitors.entrySeq().map(([key, value], i) =>\n                                                <MonitorCard\n                                                    data={value}\n                                                    onClick={\n                                                        () => {\n                                                            setMonitors(\n                                                                monitors.update(key, monitor =>\n                                                                    monitor.set('selected', !monitor.get('selected')))\n                                                            )\n                                                        }\n                                                    }\n                                                    key={key}\n                                                />\n                                            )\n                                        }\n                                    </PerfectScrollbar>\n                                </Grid>\n                            </>\n                    }\n                </Grid>\n                <Grid item container xs={12} sm={8} spacing={2} style={{'height': '100%'}}>\n                    <Grid item container xs={12} justifyContent=\"space-between\" alignContent=\"center\">\n                        <Box display=\"flex\" alignItems=\"center\" flexBasis=\"55%\">\n                            <TextField\n                                label=\"Tabs Count\"\n                                type=\"number\"\n                                value={state.tabsCountValue}\n                                onChange={tabsCountChange}\n                                InputLabelProps={{'shrink': true}}\n                                InputProps={{\n                                    inputProps: {\n                                        max: 14, min: 1\n                                    }\n                                }}\n                                size=\"small\"\n                                fullWidth\n                                className={classes.tabCount}\n                            />\n                            <Button onClick={createTabs}>create</Button>\n                        </Box>\n                        <Box display=\"flex\" alignItems=\"center\">\n                            <FormControlLabel\n                                value=\"start\"\n                                control={\n                                    <Switch\n                                        color=\"primary\"\n                                        checked={state.autoMode}\n                                        onChange={autoModeChange}\n                                    />\n                                }\n                                label=\"Auto mode\"\n                                labelPlacement=\"start\"\n                            />\n                        </Box>\n\n                    </Grid>\n                    <Grid item xs={12} spacing={0} style={{'height': 'calc(100% - 60px)'}}>\n                        <PerfectScrollbar options={{suppressScrollX: false}} style={{'width': '100%'}}>\n                            {\n                                titles.sortBy(o => -o.getIn(['title', 'timestamp'])).entrySeq().map(\n                                    ([key, value]) =>\n                                        <TitleCard\n                                            data={value}\n                                            key={key}\n                                            remove={(e) => removeTitle(key)}\n                                            send={(e) => addTitleForSend(value)}\n                                            openInBrowser={openInBrowser}\n                                            openInExplorer={openInExplorer}\n                                        />\n                                )\n                            }\n                        </PerfectScrollbar>\n                    </Grid>\n                </Grid>\n            </Grid>\n        </Container>\n\n    )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport {QWebChannel} from \"qwebchannel\";\n\n\nnew QWebChannel(window.qt.webChannelTransport, function (channel) {\n\n    window.Browser = channel.objects.backend\n    window.Controller = channel.objects.controller\n\n    ReactDOM.render (\n        <React.StrictMode>\n            <App/>\n        </React.StrictMode>,\n        document.getElementById('root')\n    )\n\n})\n"],"sourceRoot":""}